/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WatchlistImport } from './routes/watchlist'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as MovieIndexImport } from './routes/movie/index'
import { Route as MovieIdImport } from './routes/movie/$id'

// Create Virtual Routes

const MoviesLazyImport = createFileRoute('/movies')()

// Create/Update Routes

const MoviesLazyRoute = MoviesLazyImport.update({
  id: '/movies',
  path: '/movies',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/movies.lazy').then((d) => d.Route))

const WatchlistRoute = WatchlistImport.update({
  id: '/watchlist',
  path: '/watchlist',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MovieIndexRoute = MovieIndexImport.update({
  id: '/movie/',
  path: '/movie/',
  getParentRoute: () => rootRoute,
} as any)

const MovieIdRoute = MovieIdImport.update({
  id: '/movie/$id',
  path: '/movie/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/watchlist': {
      id: '/watchlist'
      path: '/watchlist'
      fullPath: '/watchlist'
      preLoaderRoute: typeof WatchlistImport
      parentRoute: typeof rootRoute
    }
    '/movies': {
      id: '/movies'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof MoviesLazyImport
      parentRoute: typeof rootRoute
    }
    '/movie/$id': {
      id: '/movie/$id'
      path: '/movie/$id'
      fullPath: '/movie/$id'
      preLoaderRoute: typeof MovieIdImport
      parentRoute: typeof rootRoute
    }
    '/movie/': {
      id: '/movie/'
      path: '/movie'
      fullPath: '/movie'
      preLoaderRoute: typeof MovieIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/watchlist': typeof WatchlistRoute
  '/movies': typeof MoviesLazyRoute
  '/movie/$id': typeof MovieIdRoute
  '/movie': typeof MovieIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/watchlist': typeof WatchlistRoute
  '/movies': typeof MoviesLazyRoute
  '/movie/$id': typeof MovieIdRoute
  '/movie': typeof MovieIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/watchlist': typeof WatchlistRoute
  '/movies': typeof MoviesLazyRoute
  '/movie/$id': typeof MovieIdRoute
  '/movie/': typeof MovieIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/watchlist' | '/movies' | '/movie/$id' | '/movie'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/watchlist' | '/movies' | '/movie/$id' | '/movie'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/watchlist'
    | '/movies'
    | '/movie/$id'
    | '/movie/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  WatchlistRoute: typeof WatchlistRoute
  MoviesLazyRoute: typeof MoviesLazyRoute
  MovieIdRoute: typeof MovieIdRoute
  MovieIndexRoute: typeof MovieIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  WatchlistRoute: WatchlistRoute,
  MoviesLazyRoute: MoviesLazyRoute,
  MovieIdRoute: MovieIdRoute,
  MovieIndexRoute: MovieIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/watchlist",
        "/movies",
        "/movie/$id",
        "/movie/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/watchlist": {
      "filePath": "watchlist.jsx"
    },
    "/movies": {
      "filePath": "movies.lazy.tsx"
    },
    "/movie/$id": {
      "filePath": "movie/$id.tsx"
    },
    "/movie/": {
      "filePath": "movie/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
